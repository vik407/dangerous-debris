---
export interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description">
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<meta	name="author" content="Victor Hernandez" />
		<meta name="view-transition" content="same-origin" />
		<title>{title}</title>
	</head>
	<body>
		<div id="content">
			<slot />
		</div>
	</body>
</html>
<style is:global>
	:root {
		--accent: 124, 58, 237;
		--accent-gradient: linear-gradient(45deg, rgb(var(--accent)), #da62c4 30%, white 60%);
	}
	html {
		font-family: system-ui, sans-serif;
		background-color: #F6F6F6;
	}
	code {
		font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
			Bitstream Vera Sans Mono, Courier New, monospace;
	}

	::view-transition-old(root),
	::view-transition-new(root) {
		animation-duration: 0.5s;
	}
</style>

<script>
	//	@ts-expect-error
	if (document.startViewTransition) {
		//	@ts-expect-error
		// eslint-disable-next-line no-undef
		navigation.addEventListener('navigate', (event) => {
			const toUrl = new URL(event.destination.url);

			if (location.origin !== toUrl.origin) return;

			event.intercept({
				async handler () {
					const	response = await fetch(toUrl.pathname);
					// get the reponse body as html to query a <main> element
					const html = await response.text();
					const doc = new DOMParser().parseFromString(html, 'text/html').querySelector('body');
					// Use the View Transition API
					//	@ts-expect-error
					document.startViewTransition(()	=> {
						document.body.innerHTML	= doc.innerHTML;
						document.documentElement.scrollTop = 0;
					});
				}
			})
		});
	}
</script>
